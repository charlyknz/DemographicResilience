resil = gsub("(Resistance).*", "\\1", resil),
resil = gsub("Intercept", "", resil),
resil = gsub("GenT", "", resil),
resil = gsub("Fec", "", resil),
resil = gsub("Dimension", "", resil),
resil = gsub(":", "", resil),
resil = gsub("GenT:Fec", "", resil),
.variable=gsub("xt", "", .variable),
.variable=gsub("rlwr", "", .variable),
.variable=gsub("rupr", "", .variable),
.variable=gsub("Fec", "Mean reproductive output", .variable),
.variable=gsub("GenT", "Generation time", .variable),
.variable=gsub("Generation time:Mean reproductive output",
"Interaction", .variable),
.variable=factor(.variable,levels = c("Interaction",
"Generation time",
"Mean reproductive output")),
dataset = "Random")%>%
filter(.variable!="Dimension", .variable!="Intercept")
# plot #
library(ggplot2)
random_m %>%
pivot_longer(cols = c(xt, rlwr, rupr), names_to = "resilience", values_to = "value") %>%
ggplot(aes(x = resilience, y = value)) +
geom_violin(fill = "skyblue", alpha = 0.5) +
geom_jitter(width = 0.1, alpha = 0.2) +
labs(title = "Diversity in Resilience Metrics Across Simulated Matrices",
y = "Log-transformed Value", x = "Metric")
data_random %>%
pivot_longer(cols = c(xt, rlwr, rupr), names_to = "resilience", values_to = "value") %>%
ggplot(aes(x = resilience, y = value)) +
geom_violin(fill = "skyblue", alpha = 0.5) +
geom_jitter(width = 0.1, alpha = 0.2) +
labs(title = "Diversity in Resilience Metrics Across Simulated Matrices",
y = "Log-transformed Value", x = "Metric")
# Reshape to long format for ggplot etc.
resilience_long <- random_m %>%
select(id, xt, rupr, rlwr) %>%
pivot_longer(cols = c(xt, rupr, rlwr),
names_to = "resilience_metric",
values_to = "value") %>%
mutate(resilience_metric = case_when(
resilience_metric == "xt" ~ "Recovery Time",
resilience_metric == "rupr" ~ "Compensation",
resilience_metric == "rlwr" ~ "Resistance"
))
ggplot(resilience_long, aes(x = resilience_metric, y = value)) +
geom_violin(fill = "lightblue", alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.3, color = "darkblue") +
labs(title = "Diversity of Resilience Metrics Across Simulations",
y = "Log-transformed value", x = "") +
theme_minimal()
# What does the model say about effects on each metric?
data_random %>%
ggplot(aes(x = .variable, y = .value, color = resil)) +
geom_pointrange(aes(ymin = .lower, ymax = .upper), position = position_dodge(width = 0.5)) +
facet_wrap(~resil) +
labs(title = "Posterior Effects on Resilience Metrics",
x = "Predictor", y = "Effect Size (standardized)") +
theme_minimal()
## build communities ##
# Select 10 simulated matrices representing species with distinct resilience
library(dplyr)
set.seed(123)
community_pool <- random_m %>%
mutate(resilience_type = case_when(
xt < median(xt) & rupr > median(rupr) ~ "fast compensator",
xt > median(xt) & rlwr > median(rlwr) ~ "slow resistant",
TRUE ~ "mixed"
)) %>%
group_by(resilience_type) %>%
slice_sample(n = 5) %>%
ungroup() %>%
select(id, xt, rupr, rlwr, resilience_type)
?set.seed
# Filter out invalid or missing data
random_clean <- random_m %>%
filter(!is.na(lam), !is.infinite(lam),
!is.na(xt), !is.na(rlwr), !is.na(rupr),
!is.infinite(xt), !is.infinite(rlwr), !is.infinite(rupr)) %>%
mutate(
log_xt = log(xt + 1),
log_rlwr = log(rlwr + 1),
log_rupr = log(rupr + 1)
)
library(GGally)
install.packages("GGally")
library(GGally)
random_clean %>%
select(lam, xt, rlwr, rupr) %>%
ggpairs(title = "Pairwise Plot: λ and Resilience Metrics")
# Filter out invalid or missing data
random_clean <- random_m %>%
filter(!is.na(lam), !is.infinite(lam),
!is.na(xt), !is.na(rlwr), !is.na(rupr),
!is.infinite(xt), !is.infinite(rlwr), !is.infinite(rupr)) %>%
mutate(
log_xt = log(xt + 1),
log_rlwr = log(rlwr + 1),
log_rupr = log(rupr + 1)
)%>%
rename(RecoveryTime = xt,
Resistance = rlwr,
Copensation = rupr)
library(GGally)
random_clean %>%
select(lam, xt, rlwr, rupr) %>%
ggpairs(title = "Pairwise Plot: λ and Resilience Metrics")
random_clean %>%
select(lam, RecoveryTime, Resistance, Compensation) %>%
ggpairs(title = "Pairwise Plot: λ and Resilience Metrics")
# Filter out invalid or missing data
random_clean <- random_m %>%
filter(!is.na(lam), !is.infinite(lam),
!is.na(xt), !is.na(rlwr), !is.na(rupr),
!is.infinite(xt), !is.infinite(rlwr), !is.infinite(rupr)) %>%
mutate(
log_xt = log(xt + 1),
log_rlwr = log(rlwr + 1),
log_rupr = log(rupr + 1)
)%>%
rename(RecoveryTime = xt,
Resistance = rlwr,
Compensation = rupr)
library(GGally)
random_clean %>%
select(lam, RecoveryTime, Resistance, Compensation) %>%
ggpairs(title = "Pairwise Plot: λ and Resilience Metrics")
# Building communities --------------------------------------------------------------
# Clean and order by recovery time
mpm_data <- random_m %>%
filter(!is.na(xt), !is.infinite(xt)) %>%
arrange(xt)
# Create 2 communities
fast_comm <- mpm_data %>% slice(1:5)    # Fast-recovery species
slow_comm <- mpm_data %>% slice_tail(n=5)  # Slow-recovery species
# Extract A matrices
fast_As <- lapply(fast_comm$mat, function(x) x$matrix_A)
slow_As <- lapply(slow_comm$mat, function(x) x$matrix_A)
# Community matrices
make_block_diag <- function(A_list) {
Reduce(function(a, b) {
rbind(
cbind(a, matrix(0, nrow(a), ncol(b))),
cbind(matrix(0, nrow(b), ncol(a)), b)
)
}, A_list)
}
A_fast <- make_block_diag(fast_As)
A_slow <- make_block_diag(slow_As)
A_fast <- make_block_diag(fast_As)
A_slow <- make_block_diag(slow_As)
# Equal starting population for each stage
init_pop_fast <- rep(10, nrow(A_fast))
init_pop_slow <- rep(10, nrow(A_slow))
# Time steps
time_steps <- 50
# Projection using popdemo
proj_fast <- popdemo::project(A_fast, vector = init_pop_fast, time = time_steps)
proj_slow <- popdemo::project(A_slow, vector = init_pop_slow, time = time_steps)
# Convert to data frames
df_fast <- data.frame(time = 0:time_steps, total_pop = colSums(proj_fast), strategy = "Fast Recovery")
df_slow <- data.frame(time = 0:time_steps, total_pop = colSums(proj_slow), strategy = "Slow Recovery")
df_proj <- bind_rows(df_fast, df_slow)
ggplot(df_proj, aes(x = time, y = total_pop, color = strategy)) +
geom_line(size = 1.2) +
theme_minimal() +
labs(title = "Community Dynamics by Recovery Strategy",
y = "Total Population Size",
x = "Time")
ggplot(df_proj, aes(x = time, y = total_pop, color = strategy)) +
geom_line(linewidth = 1.2) +
theme_minimal() +
labs(title = "Community Dynamics by Recovery Strategy",
y = "Total Population Size",
x = "Time")
# Clean and order by recovery time
# Project for 20 time steps before disturbance
pre_dist_fast <- project(A_fast, vector = init_pop_fast, time = 20)
pre_dist_slow <- project(A_slow, vector = init_pop_slow, time = 20)
# Apply disturbance: reduce population to 30% of pre-dist levels at t = 20
pop_fast_post_dist <- pre_dist_fast[, 20] * 0.3
ggplot(df_proj, aes(x = time, y = total_pop, color = strategy)) +
geom_line(linewidth = 1.2) +
theme_minimal() +
labs(title = "Community Dynamics by Recovery Strategy",
y = "Total Population Size",
x = "Time")
# Extract A matrices
fast_As <- lapply(fast_comm$mat, function(x) x$matrix_A)
slow_As <- lapply(slow_comm$mat, function(x) x$matrix_A)
# Community matrices
make_block_diag <- function(A_list) {
Reduce(function(a, b) {
rbind(
cbind(a, matrix(0, nrow(a), ncol(b))),
cbind(matrix(0, nrow(b), ncol(a)), b)
)
}, A_list)
}
A_fast <- make_block_diag(fast_As)
A_slow <- make_block_diag(slow_As)
# Equal starting population for each stage
init_pop_fast <- rep(10, nrow(A_fast))
init_pop_slow <- rep(10, nrow(A_slow))
# Time steps
time_steps <- 50
# Projection using popdemo
proj_fast <- popdemo::project(A_fast, vector = init_pop_fast, time = time_steps)
proj_slow <- popdemo::project(A_slow, vector = init_pop_slow, time = time_steps)
# Convert to data frames
df_fast <- data.frame(time = 0:time_steps, total_pop = colSums(proj_fast), strategy = "Fast Recovery")
df_slow <- data.frame(time = 0:time_steps, total_pop = colSums(proj_slow), strategy = "Slow Recovery")
df_proj <- bind_rows(df_fast, df_slow)
ggplot(df_proj, aes(x = time, y = total_pop, color = strategy)) +
geom_line(linewidth = 1.2) +
theme_minimal() +
labs(title = "Community Dynamics by Recovery Strategy",
y = "Total Population Size",
x = "Time")
community_pool <- random_m %>%
mutate(resilience_type = case_when(
xt < median(xt) & rupr > median(rupr) ~ "fast compensator",
xt > median(xt) & rlwr > median(rlwr) ~ "slow resistant",
TRUE ~ "mixed"
)) %>%
group_by(resilience_type) %>%
slice_sample(n = 5) %>%
ungroup() %>%
select(id, xt, rupr, rlwr, resilience_type)
View(community_pool)
community_pool <- random_m %>%
mutate(resilience_type = case_when(
xt < median(xt) & rupr > median(rupr) ~ "fast compensator",
xt > median(xt) & rlwr > median(rlwr) ~ "slow resistant",
TRUE ~ "mixed"
)) %>%
group_by(resilience_type) %>%
slice_sample(n = 5) %>%
ungroup() %>%
select(id, xt, rupr, rlwr, resilience_type)
# Filter out invalid or missing data
random_clean <- random_m %>%
filter(!is.na(lam), !is.infinite(lam),
!is.na(xt), !is.na(rlwr), !is.na(rupr),
!is.infinite(xt), !is.infinite(rlwr), !is.infinite(rupr)) %>%
mutate(
log_xt = log(xt + 1),
log_rlwr = log(rlwr + 1),
log_rupr = log(rupr + 1)
)%>%
rename(RecoveryTime = xt,
Resistance = rlwr,
Compensation = rupr)
random_clean %>%
select(lam, RecoveryTime, Resistance, Compensation) %>%
ggpairs(title = "Pairwise Plot: λ and Resilience Metrics")
library(tidybayes)
library(Rage)
library(popdemo)
library(tidyverse)
library(GGallz)
library(GGally)
library(tidybayes)
library(tidyr)
library(brms)
library(bayestestR)
library(tidybayes)
library(dplyr)
library(ggplot2)
library(cowplot)
library(patchwork)
library(Rcompadre)
library(Rage)
library(popdemo)
library(tidyverse)
library(GGally)
library(tidybayes)
library(tidyr)
library(brms)
library(bayestestR)
library(tidybayes)
library(dplyr)
library(ggplot2)
library(dplyr)
library(ggplot2)
library(cowplot)
library(patchwork)
library(Rcompadre)
library(doSNOW)
library(parallel)
library(tidyverse)
library(popbio)
library(popbio)
library(Matrix)
library(Rage)
library(plyr)
library(mpmtools)
path <- gsub("/Code", "", dirname(rstudioapi::getActiveDocumentContext()$path))
DataPath <- paste0(path,"/Data")
ResultPath <- paste0(path, "/Results")
CodePath <- paste0(path, "/Code")
source(paste0(CodePath, "/SimulationFunctions.R"))
source(paste0(CodePath, "/Functions.R"))
# Lamda ranges were chosen according to the range in the Compadre/ Commadre datasets
# Load the species that we used in R compadre
load(paste0(DataPath,"/ResData.RData"))
dimensions <- range(c(smallandata$Dimension, smallplandata$Dimension))
rm(smallandata, smallantree, smallplandata, smalltree)
clus  <- makeCluster(detectCores() - 1)
registerDoSNOW(clus)
random <- foreach(i = c(3:max(dimensions)),
.packages = c("tidyverse", "popbio", "popdemo", "Rage"),
.combine = "rbind") %dopar% {
matrices <- replicate(n=10,
random_matrices(dimension=i),
simplify = F)
tibble(id = i, mat = matrices)
return(matrices)
}
# Estimate the life history traits
random_m <- foreach(i = seq_along(random),
.combine = "rbind",
.packages = c("tidyverse", "popdemo", "popbio", "Rage")) %dopar% {
matrix <- random[[i]]
id <- i
if(!is.null(matrix$matrix_A) &&
is.matrix(matrix$matrix_A) &&
nrow(matrix$matrix_A) == ncol(matrix$matrix_A) &&
isErgodic(matrix$matrix_A)) {
#use tryCatch() to catch errors
lam <- tryCatch(lambda(matrix$matrix_A), error = function(e) NA)
GenT <- tryCatch(generation.time(matrix$matrix_A), error = function(e) NA)
Fec <- tryCatch(vital_rates(matrix$matrix_U, matrix$matrix_F)$fec, error = function(e) NA)
rupr <- tryCatch(reac(A = matrix$matrix_A, bound = "upper"), error = function(e) NA)
rlwr <- tryCatch(reac(A = matrix$matrix_A, bound = "lower"), error = function(e) NA)
xt <- tryCatch(return.time(matrix$matrix_A), error = function(e) NA)
Dimension <- tryCatch(nrow(matrix$matrix_A), error = function(e) NA)
} else {
lam <- NA
GenT <- NA
Fec <- NA
rupr <- NA
rlwr <- NA
xt <- NA
Dimension <- NA
}
tibble(id = id, mat = list(matrix), lam, GenT, Fec, rupr, rlwr, xt, Dimension)
}
stopCluster(clus)
random_m<- random_m %>%
filter(!is.infinite(GenT)) %>%
mutate(xt=log(xt+1),
rupr=log(rupr+1),
rlwr=abs(log(rlwr+1)),
Fec=log(Fec+1),
GenT=log(GenT+1))
setwd(DataPath)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores()-1)
## Bayesian linear regression model ##
# These options help Stan (used by brms) run faster and avoid recompiling models:
rstan_options(auto_write = TRUE)  # Automatically saves compiled Stan models to disk (speeds up repeated runs)
options(mc.cores = parallel::detectCores() - 1)  # Allows parallel computation using multiple CPU cores (faster sampling)
# Set modelling parameters
iter = 8000                     # Total number of MCMC iterations per chain
thin = 0.0005 * iter            # Thinning rate: keep every 4th sample
warmup = 0.1 * iter             # Burn-in: discard first 800 samples to allow the sampler to adapt
# Define prior distributions for Bayesian model
priors <- c(
prior(normal(0, 10), class = Intercept),  # A wide/weak prior on the intercept
prior(normal(0, 1), class = b)            # Tighter prior on slopes ("b" = regression coefficients)
)
random_m <- random_m %>% drop_na(GenT, Fec, rlwr, rupr, xt)
model_random <- brm( # fitting a multivariate Bayesian linear regression model using brms::brm():
mvbind(scale(xt), scale(rupr), scale(rlwr)) ~
scale(GenT) + scale(Fec) + scale(GenT):scale(Fec) + scale(Dimension),
iter = iter,                # Total MCMC iterations per chain
thin = thin,                # Thinning factor (keep every nth sample)
warmup = warmup,            # Number of warmup (burn-in) iterations
prior = priors,             # Use priors defined earlier
control = list(
adapt_delta = .975,       # High adapt_delta avoids divergent transitions (increases accuracy)
max_treedepth = 20        # Allow more depth in HMC sampler tree (prevents some pathologies)
),
data = random_m,            # Dataframe containing simulated life history matrices and traits
family = gaussian(),        # Assumes normal residuals (appropriate for continuous responses)
cores = 18                  # Number of CPU cores to use in parallel (set based on your hardware)
)
data_random <- model_random %>%
gather_draws(`b_.*`, regex = TRUE) %>%     # Extract all posterior draws for regression coefficients (those starting with 'b_')
median_qi(.width = c(.95, .9, .8)) %>%     # Compute median and credible intervals (95%, 90%, 80%)
# Clean and label coefficients for plotting/interpretation
mutate(
.variable = gsub("b_", "", .variable),         # Remove "b_" prefix
.variable = gsub("scale", "", .variable),      # Remove "scale" from variable names
.variable = gsub("_", "", .variable),          # Remove any stray underscores
resil = gsub("xt", "Recovery time", .variable),     # Rename variables for clarity
resil = gsub("rlwr", "Resistance", resil),
resil = gsub("rupr", "Compensation", resil),
resil = gsub("(Recovery time).*", "\\1", resil),    # Keep only label
resil = gsub("(Compensation).*", "\\1", resil),
resil = gsub("(Resistance).*", "\\1", resil),
resil = gsub("Intercept", "", resil),               # Clean up leftover terms
resil = gsub("GenT", "", resil),
resil = gsub("Fec", "", resil),
resil = gsub("Dimension", "", resil),
resil = gsub(":", "", resil),
resil = gsub("GenT:Fec", "", resil),
# Now clean up predictor names
.variable = gsub("xt", "", .variable),
.variable = gsub("rlwr", "", .variable),
.variable = gsub("rupr", "", .variable),
.variable = gsub("Fec", "Mean reproductive output", .variable),
.variable = gsub("GenT", "Generation time", .variable),
.variable = gsub("Generation time:Mean reproductive output",
"Interaction", .variable),
# Define factor levels for plotting
.variable = factor(.variable, levels = c(
"Interaction", "Generation time", "Mean reproductive output"
)),
dataset = "Random"   # Tag the output as coming from random matrices
) %>%
filter(.variable != "Dimension", .variable != "Intercept")  # Drop unneeded terms
# Reshape to long format for ggplot etc.
resilience_long <- random_m %>%
select(id, xt, rupr, rlwr) %>%
pivot_longer(cols = c(xt, rupr, rlwr),
names_to = "resilience_metric",
values_to = "value") %>%
mutate(resilience_metric = case_when(
resilience_metric == "xt" ~ "Recovery Time",
resilience_metric == "rupr" ~ "Compensation",
resilience_metric == "rlwr" ~ "Resistance" ))
ggplot(resilience_long, aes(x = resilience_metric, y = value)) +
geom_violin(fill = "lightblue", alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.3, color = "darkblue") +
labs(title = "Diversity of Resilience Metrics Across Simulations",
y = "Log-transformed value", x = "") +
theme_minimal()
# What does the model say about effects on each metric?
data_random %>%
ggplot(aes(x = .variable, y = .value, color = resil)) +
geom_pointrange(aes(ymin = .lower, ymax = .upper), position = position_dodge(width = 0.5)) +
facet_wrap(~resil) +
labs(title = "Posterior Effects on Resilience Metrics",
x = "Predictor", y = "Effect Size (standardized)") +
theme_minimal()
View(random_m)
smallplandata
# Lamda ranges were chosen according to the range in the Compadre/ Commadre datasets
# Load the species that we used in R compadre
load(paste0(DataPath,"/ResData.RData"))
View(smallplandata)
dimensions
max(dimensions)
dimensions <- range(c(2,59))
rm(smallandata, smallantree, smallplandata, smalltree)
clus  <- makeCluster(detectCores() - 1)
registerDoSNOW(clus)
random <- foreach(i = c(3:max(dimensions)),
.packages = c("tidyverse", "popbio", "popdemo", "Rage"),
.combine = "rbind") %dopar% {
matrices <- replicate(n=10,
random_matrices(dimension=i),
simplify = F)
tibble(id = i, mat = matrices)
return(matrices)
}
# Reactivity analysis of matrix A to estimate the life history traits----------------
random_m <- foreach(i = seq_along(random),
.combine = "rbind",
.packages = c("tidyverse", "popdemo", "popbio", "Rage"))  %dopar% {
matrix <- random[[i]]
id <- i
if(!is.null(matrix$matrix_A) &&
is.matrix(matrix$matrix_A) &&
nrow(matrix$matrix_A) == ncol(matrix$matrix_A) &&
isErgodic(matrix$matrix_A)) {
#use tryCatch() to catch errors
lam <- tryCatch(lambda(matrix$matrix_A), error = function(e) NA)
GenT <- tryCatch(generation.time(matrix$matrix_A), error = function(e) NA)
Fec <- tryCatch(vital_rates(matrix$matrix_U, matrix$matrix_F)$fec, error = function(e) NA)
#This is the maximum amplification after a small pulse shock:
rupr <- tryCatch(reac(A = matrix$matrix_A, bound = "upper"), error = function(e) NA)
#This is the minimum possible growth immediately after a small disturbance:
rlwr <- tryCatch(reac(A = matrix$matrix_A, bound = "lower"), error = function(e) NA)
xt <- tryCatch(return.time(matrix$matrix_A), error = function(e) NA)
Dimension <- tryCatch(nrow(matrix$matrix_A), error = function(e) NA)
} else {
lam <- NA
GenT <- NA
Fec <- NA
rupr <- NA
rlwr <- NA
xt <- NA
Dimension <- NA
}
tibble(id = id, mat = list(matrix), lam, GenT, Fec, rupr, rlwr, xt, Dimension)
}
stopCluster(clus)
random_m<- random_m %>%
filter(!is.infinite(GenT)) %>%
mutate(xt=log(xt+1),
rupr=log(rupr+1),
rlwr=abs(log(rlwr+1)),
Fec=log(Fec+1),
GenT=log(GenT+1))
setwd(DataPath)
View(random)
random
random[,1]
